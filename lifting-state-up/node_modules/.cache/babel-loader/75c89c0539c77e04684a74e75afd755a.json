{"ast":null,"code":"import _classCallCheck from \"/home/thaont/Documents/react/lifting-state-up/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/thaont/Documents/react/lifting-state-up/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/thaont/Documents/react/lifting-state-up/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/thaont/Documents/react/lifting-state-up/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/thaont/Documents/react/lifting-state-up/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/thaont/Documents/react/lifting-state-up/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/thaont/Documents/react/lifting-state-up/src/component/Calculator.js\";\nimport React, { Component } from \"react\";\nimport TemperatureInput from \"./TemperatureInput\";\nimport BoilingVerdict from \"./BoilingVerdict\";\n\nvar Calculator =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Calculator, _Component);\n\n  function Calculator(props) {\n    var _this;\n\n    _classCallCheck(this, Calculator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Calculator).call(this, props));\n    _this.state = {\n      temp: \"\",\n      scale: \"c\"\n    };\n    _this.handleCelChange = _this.handleCelChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleFahChange = _this.handleFahChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Calculator, [{\n    key: \"handleCelChange\",\n    value: function handleCelChange(temp) {\n      this.setState({\n        scale: \"c\",\n        temp: temp\n      });\n    }\n  }, {\n    key: \"handleFahChange\",\n    value: function handleFahChange(tem) {\n      this.setState({\n        scale: \"f\",\n        tem: tem\n      });\n    }\n  }, {\n    key: \"toCel\",\n    value: function toCel(fah) {\n      return (fah - 32) * 5 / 9;\n    }\n  }, {\n    key: \"toFah\",\n    value: function toFah(cel) {\n      return cel * 9 / 5 + 32;\n    }\n  }, {\n    key: \"tryConvert\",\n    value: function tryConvert(temp, convert) {\n      var input = parseFloat(temp);\n\n      if (Number.isNaN(input)) {\n        return \"\";\n      }\n\n      var output = convert(input);\n      var rounded = Math.round(output * 1000) / 1000;\n      return rounded.toString();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var scale = this.props.scale;\n      var temp = this.state.temp;\n      var cel = scale === \"f\" ? tryConvert(temp, this.toCel) : temp;\n      var fah = scale === \"c\" ? tryConvert(temp, this.toFah) : temp;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(TemperatureInput, {\n        scale: scale.c,\n        temp: cel,\n        onTemChange: this.handleCelChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), React.createElement(TemperatureInput, {\n        scale: scale.f,\n        temp: fah,\n        onTemChange: this.handleFahChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(BoilingVerdict, {\n        cel: parseFloat(cel),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Calculator;\n}(Component);\n\nexport default Calculator;","map":{"version":3,"sources":["/home/thaont/Documents/react/lifting-state-up/src/component/Calculator.js"],"names":["React","Component","TemperatureInput","BoilingVerdict","Calculator","props","state","temp","scale","handleCelChange","bind","handleFahChange","setState","tem","fah","cel","convert","input","parseFloat","Number","isNaN","output","rounded","Math","round","toString","tryConvert","toCel","toFah","c","f"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;IAEMC,U;;;;;AACJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,KAAK,EAAE;AAFI,KAAb;AAIA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBC,IAArB,uDAAvB;AACA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBD,IAArB,uDAAvB;AAPiB;AAQlB;;;;oCAEeH,I,EAAM;AACpB,WAAKK,QAAL,CAAc;AACZJ,QAAAA,KAAK,EAAE,GADK;AAEZD,QAAAA,IAAI,EAAJA;AAFY,OAAd;AAID;;;oCAEeM,G,EAAK;AACnB,WAAKD,QAAL,CAAc;AACZJ,QAAAA,KAAK,EAAE,GADK;AAEZK,QAAAA,GAAG,EAAHA;AAFY,OAAd;AAID;;;0BAEKC,G,EAAK;AACT,aAAQ,CAACA,GAAG,GAAG,EAAP,IAAa,CAAd,GAAmB,CAA1B;AACD;;;0BAEKC,G,EAAK;AACT,aAAQA,GAAG,GAAG,CAAP,GAAY,CAAZ,GAAgB,EAAvB;AACD;;;+BAEUR,I,EAAMS,O,EAAS;AACxB,UAAMC,KAAK,GAAGC,UAAU,CAACX,IAAD,CAAxB;;AACA,UAAIY,MAAM,CAACC,KAAP,CAAaH,KAAb,CAAJ,EAAyB;AACvB,eAAO,EAAP;AACD;;AACD,UAAMI,MAAM,GAAGL,OAAO,CAACC,KAAD,CAAtB;AACA,UAAMK,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAG,IAApB,IAA4B,IAA5C;AACA,aAAOC,OAAO,CAACG,QAAR,EAAP;AACD;;;6BAEQ;AAAA,UACCjB,KADD,GACW,KAAKH,KADhB,CACCG,KADD;AAAA,UAECD,IAFD,GAEU,KAAKD,KAFf,CAECC,IAFD;AAGP,UAAMQ,GAAG,GAAGP,KAAK,KAAK,GAAV,GAAgBkB,UAAU,CAACnB,IAAD,EAAO,KAAKoB,KAAZ,CAA1B,GAA+CpB,IAA3D;AACA,UAAMO,GAAG,GAAGN,KAAK,KAAK,GAAV,GAAgBkB,UAAU,CAACnB,IAAD,EAAO,KAAKqB,KAAZ,CAA1B,GAA+CrB,IAA3D;AAEA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,gBAAD;AACE,QAAA,KAAK,EAAEC,KAAK,CAACqB,CADf;AAEE,QAAA,IAAI,EAAEd,GAFR;AAGE,QAAA,WAAW,EAAE,KAAKN,eAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAME,oBAAC,gBAAD;AACE,QAAA,KAAK,EAAED,KAAK,CAACsB,CADf;AAEE,QAAA,IAAI,EAAEhB,GAFR;AAGE,QAAA,WAAW,EAAE,KAAKH,eAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,EAWE,oBAAC,cAAD;AAAgB,QAAA,GAAG,EAAEO,UAAU,CAACH,GAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,CADF;AAeD;;;;EAhEsBd,S;;AAmEzB,eAAeG,UAAf","sourcesContent":["import React, { Component } from \"react\";\nimport TemperatureInput from \"./TemperatureInput\";\nimport BoilingVerdict from \"./BoilingVerdict\";\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temp: \"\",\n      scale: \"c\"\n    };\n    this.handleCelChange = this.handleCelChange.bind(this);\n    this.handleFahChange = this.handleFahChange.bind(this);\n  }\n\n  handleCelChange(temp) {\n    this.setState({\n      scale: \"c\",\n      temp\n    });\n  }\n\n  handleFahChange(tem) {\n    this.setState({\n      scale: \"f\",\n      tem\n    });\n  }\n\n  toCel(fah) {\n    return ((fah - 32) * 5) / 9;\n  }\n\n  toFah(cel) {\n    return (cel * 9) / 5 + 32;\n  }\n\n  tryConvert(temp, convert) {\n    const input = parseFloat(temp);\n    if (Number.isNaN(input)) {\n      return \"\";\n    }\n    const output = convert(input);\n    const rounded = Math.round(output * 1000) / 1000;\n    return rounded.toString();\n  }\n\n  render() {\n    const { scale } = this.props;\n    const { temp } = this.state;\n    const cel = scale === \"f\" ? tryConvert(temp, this.toCel) : temp;\n    const fah = scale === \"c\" ? tryConvert(temp, this.toFah) : temp;\n\n    return (\n      <div>\n        <TemperatureInput\n          scale={scale.c}\n          temp={cel}\n          onTemChange={this.handleCelChange}\n        />\n        <TemperatureInput\n          scale={scale.f}\n          temp={fah}\n          onTemChange={this.handleFahChange}\n        />\n        <BoilingVerdict cel={parseFloat(cel)} />\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n"]},"metadata":{},"sourceType":"module"}